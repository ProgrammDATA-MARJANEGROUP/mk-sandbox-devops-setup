name: Post PR Comment

on:
  workflow_call:
    inputs:
      fmt_status:
        required: true
        type: string
      tflint_status:
        required: true
        type: string
      tfsec_status:
        required: true
        type: string
      pr_number:
        required: true
        type: number

jobs:
  post-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: code-quality-results

      - name: Post comment on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            let comment = '## Code Quality Gate Results\n\n';

            const fmtOutputPath = 'fmt-output.txt';
            const tflintOutputPath = 'tflint-output.txt';
            const tfsecOutputPath = 'tfsec-output.txt';

            comment += `<details>
              <summary><strong>Terraform fmt</strong> (${{ inputs.fmt_status }})</summary>\n\n`;

            if (fs.existsSync(fmtOutputPath)) {
              const fmtOutput = fs.readFileSync(fmtOutputPath, 'utf8');
              comment += `\`\`\`\n${fmtOutput}\n\`\`\`\n`;
            } else {
              comment += '> [!WARNING]\n> Terraform fmt output not available\n';
            }

            comment += '</details>\n\n';

            comment += `<details>
              <summary><strong>TFLint</strong> (${{ inputs.tflint_status }})</summary>\n\n`;

            if (fs.existsSync(tflintOutputPath)) {
              const tflintOutput = fs.readFileSync(tflintOutputPath, 'utf8');
              comment += `\`\`\`\n${tflintOutput}\n\`\`\`\n`;
            } else {
              comment += '> [!WARNING]\n> TFLint output not available\n';
            }

            comment += '</details>\n\n';

            comment += `<details>
              <summary><strong>TFSec</strong> (${{ inputs.tfsec_status }})</summary>\n\n`;

            if (fs.existsSync(tfsecOutputPath)) {
              const tfsecOutput = fs.readFileSync(tfsecOutputPath, 'utf8');
              comment += `\`\`\`\n${tfsecOutput}\n\`\`\`\n`;
            } else {
              comment += '> [!WARNING]\n> TFSec output not available\n';
            }

            comment += '</details>\n';

            github.rest.issues.createComment({
              issue_number: ${{ inputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });