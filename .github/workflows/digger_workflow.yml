name: Digger Workflow

on:
  workflow_dispatch:
    inputs:
      id:
        description: 'run identifier'
        required: false
      job:
        description: 'job identifier'
        required: true
      comment_id:
        description: 'comment identifier'
        required: true

permissions:
  contents: write      # required to merge PRs
  actions: write       # required for plan persistence
  id-token: write      # required for workload-identity-federation
  pull-requests: write # required to post PR comments
  statuses: write      # required to validate combined 

jobs:
  check-tf-code-quality:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check_status.outputs.status }}
    steps:
      - name: Check TF Code Quality Gate Status
        id: check_status
        uses: actions/github-script@v6
        with:
          script: |
            const payload = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'tf_code_quality_gate.yml', // Use the actual file name or ID
              branch: 'main', // Adjust if necessary
              event: 'pull_request'
            });
            const run = payload.data.workflow_runs.find(run => run.head_sha === context.sha);
            if (run && run.conclusion === 'success') {
              return 'success';
            } else {
              return 'failure';
            }

  digger-job:
    needs: check-tf-code-quality
    if: needs.check-tf-code-quality.outputs.status == 'success'
    runs-on: ubuntu-latest
    steps:     
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
      - name: Checkout base branch
        uses: actions/checkout@v4
      - uses: diggerhq/digger@v0.4.21
        with:
          no-backend: false
          configure-checkout: false
          disable-locking: false
          upload-plan-destination: github
          digger-hostname: 'https://cloud.digger.dev'
          digger-organisation: 'digger'
          digger-token: ${{ secrets.DIGGER_TOKEN }}
          setup-azure: true
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          setup-terraform: true
          terraform-version: 1.8.2
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          LOCK_PROVIDER: azure
          DIGGER_AZURE_AUTH_METHOD: CONNECTION_STRING
          DIGGER_AZURE_CONNECTION_STRING: ${{ secrets.DIGGER_AZURE_CONNECTION_STRING }}